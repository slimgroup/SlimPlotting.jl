var documenterSearchIndex = {"docs":
[{"location":"README/","page":"Home","title":"Home","text":"(Image: ) (Image: )","category":"page"},{"location":"README/#SlimPlotting","page":"Home","title":"SlimPlotting","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"Utitliy function to plot physically gridded data. The functions currently only supports 2D data.","category":"page"},{"location":"README/#Disclaimer","page":"Home","title":"Disclaimer","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"This is a small package that I started to make my life easier visualizing data and results easily. Not all functionalities are tested and some of the features may need additional options for better images.  This package is under developpement and weclomes contributions throug Issues, Pull Requests or Discussions","category":"page"},{"location":"README/#Functionalities","page":"Home","title":"Functionalities","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"This package implement four main functions that rely on a base _plot_with_units internal function.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"plot_simage to plot a 2D seismic image (i.e RTM)\nplot_sdata to plot 2D seismic data such as a shot record\nplot_fslice to plot a 2D frequency slice of seismic data.\nplot_velocity to plot a 2D velocity model.\nwiggle_plot to make a 2D wiggle plot of a seismic data.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"The functions plot_simage, plot_sdata and plot_velocity support abstract object with meta-data containing the grid spacing. For example, you can plot a 2D JUDI PhysicalParameter either via plot_velocity(p.data, p.d) or directyl via plot_velocity(p) that will extract the data and spacing automatically. While this supports JUDI since we are using it exensively, this package does not depend on it and only expect a Julia structure as an input (when the spacing is not specified) containg a .d attribute with the grid spacing. We show in the simple example how to setup such a simple strucure.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"The expected inputs are:","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"plot_simage(array, tuple; kw...) or plot_simage(structure) with strucutre.d","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"containing the grid spacing and structure.data containing the 2D array.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"plot_velocity(array, tuple; kw...) or plot_velocity(structure) with strucutre.d","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"containing the grid spacing and structure.data containing the 2D array.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"plot_sdata(array, tuple; kw...) or plot_sdata(structure) with strucutre.dt","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"containing the time sampling rate and structure.d containing the receiver spacing (uniform sampling is assumed at the time) and structure.data containing the 2D array.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"wiggle_plot(array, xrec, time_axis; kw...). In this case, xrec, time_axis are optional and wil default to 1:size(array, 2), 1:size(array, 1) respectively.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"and you can check the doctring (julia ?) for additional information on the optional keyword arguments.","category":"page"},{"location":"README/#Color-maps","page":"Home","title":"Color maps","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"The colormap support is extensive as this uses three sources:","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"matplotlib standard colormaps.\nColorShemes.jl that implements a variery of colormaps from different packages including Matplotlib, Seaborn, GNUPlot, colorcet(Collection of perceptually accurate colormaps). You can provide the chosen colormap as a kewyword , i.e plot_simage(array, tuple; cmap=:jet).\ncolorcet perceptually accurate colormaps that are available through their colorcet names (i.e cet_rainbow4 for a perceptually accurate jet colormap).","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"All functionality, with the exeption of wiggle_plot accept the keyword argument cmap, i.e plot_velocity(array, spacing; cmap=:vik).","category":"page"},{"location":"README/#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"This package is developped and maintained by Mathias Louboutin<mlouboutin3@gatech.edu> and the ML4Seismic Lab at Georgia Institute of Technology.","category":"page"},{"location":"#SLimPlotting.jl-documentation","page":"SLimPlotting.jl documentation","title":"SLimPlotting.jl documentation","text":"","category":"section"},{"location":"","page":"SLimPlotting.jl documentation","title":"SLimPlotting.jl documentation","text":"Welcome to the documentation and API reference for SLimPlotting.jl.","category":"page"},{"location":"","page":"SLimPlotting.jl documentation","title":"SLimPlotting.jl documentation","text":"","category":"page"},{"location":"API/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"API/","page":"API reference","title":"API reference","text":"CurrentModule = SlimPlotting","category":"page"},{"location":"API/","page":"API reference","title":"API reference","text":"plot_fslice\nplot_velocity\nplot_simage\nplot_sdata","category":"page"},{"location":"API/#SlimPlotting.plot_fslice","page":"API reference","title":"SlimPlotting.plot_fslice","text":"plot_fslice(image, spacing; perc=98, cmap=:diverging_bwr_20_95_c54_n256,\n            o=(0, 0), interp=\"hanning\", aspect=nothing, d_scale=1.5,\n            name=\"RTM\", units=\"m\", new_fig=true, save=nothing)\n\nPlot a 2D frequency slice of seismic data. Calls _plot_with_units.\n\nArguments\n\nimage::Array{T, 2}: image to be plotted\nspacing::Tuple: grid spacing in physical units\nperc::Int: (Optional) Clipping percentile, default=95\ncmap::Symbol: (Optional) Color map, default=:divergingbwr2095c54_n256\no::Tuple: (Optional) Origin of the image, default=(0, 0)\ninterp::String: (Optional) Interpolation method, default=\"hanning\"\naspect::Symbol: (Optional) Aspect ratio, default=:auto\nd_scale::Float: (Optional) Depth scaling, default=1.5. Applied scaling is (1:max_depth).^d_scale.\nlabels::Tuple: (Optional) Labels for the axes, default=(:X, :Depth)\nname::String: (Optional) Figure title, default=\"RTM\"\nunits::Tuple(String): (Optional) Physical units of each axis, default=(:m, :m).\nnew_fig::Bool: (Optional) Create a new figure, default=true\nsave::String: (Optional) Save figure to file, default=nothing doesn't save the figure\ncbar::Bool: (Optional) Show colorbar, default=false\n\n\n\n\n\n","category":"function"},{"location":"API/#SlimPlotting.plot_velocity","page":"API reference","title":"SlimPlotting.plot_velocity","text":"plot_velocity(image, spacing; perc=98, cmap=:cet_rainbow,\n            o=(0, 0), interp=\"hanning\", aspect=nothing, d_scale=1.5,\n            name=\"RTM\", units=\"m\", new_fig=true, save=nothing)\n\nPlot a velocity model. Calls _plot_with_units.\n\nArguments\n\nimage::Array{T, 2}: image to be plotted\nspacing::Tuple: grid spacing in physical units\nperc::Int: (Optional) Clipping percentile, default=95\ncmap::Symbol: (Optional) Color map, default=:cet_rainbow\no::Tuple: (Optional) Origin of the image, default=(0, 0)\ninterp::String: (Optional) Interpolation method, default=\"hanning\"\naspect::Symbol: (Optional) Aspect ratio, default=:auto\nd_scale::Float: (Optional) Depth scaling, default=1.5. Applied scaling is (1:max_depth).^d_scale.\nlabels::Tuple: (Optional) Labels for the axes, default=(:X, :Depth)\nname::String: (Optional) Figure title, default=\"RTM\"\nunits::Tuple(String): (Optional) Physical units of each axis, default=(:m, :m).\nnew_fig::Bool: (Optional) Create a new figure, default=true\nsave::String: (Optional) Save figure to file, default=nothing doesn't save the figure\ncbar::Bool: (Optional) Show colorbar, default=false\n\n\n\n\n\n","category":"function"},{"location":"API/#SlimPlotting.plot_simage","page":"API reference","title":"SlimPlotting.plot_simage","text":"plot_simage(image, spacing; perc=98, cmap=:linear_grey_10_95_c0_n256,\n            o=(0, 0), interp=\"hanning\", aspect=nothing, d_scale=1.5,\n            labels=(:X, :Depth), name=\"RTM\", units=(:m, :m), new_fig=true,\n            save=nothing, cbar=false)\n\nPlot a 2D seismic image with a grid spacing spacing. Calls _plot_with_units.\n\nArguments\n\nimage::Array{T, 2}: image to be plotted\nspacing::Tuple: grid spacing in physical units\nperc::Int: (Optional) Clipping percentile, default=95\ncmap::Symbol: (Optional) Color map, default=:lineargrey1095c0_n256\no::Tuple: (Optional) Origin of the image, default=(0, 0)\ninterp::String: (Optional) Interpolation method, default=\"hanning\"\naspect::Symbol: (Optional) Aspect ratio, default=:auto\nd_scale::Float: (Optional) Depth scaling, default=1.5. Applied scaling is (1:max_depth).^d_scale.\nlabels::Tuple: (Optional) Labels for the axes, default=(:X, :Depth)\nname::String: (Optional) Figure title, default=\"RTM\"\nunits::Tuple(String): (Optional) Physical units of each axis, default=(:m, :m).\nnew_fig::Bool: (Optional) Create a new figure, default=true\nsave::String: (Optional) Save figure to file, default=nothing doesn't save the figure\ncbar::Bool: (Optional) Show colorbar, default=false\n\n\n\n\n\n","category":"function"},{"location":"API/#SlimPlotting.plot_sdata","page":"API reference","title":"SlimPlotting.plot_sdata","text":"plot_sdata(image, spacing; perc=98, cmap=:linear_grey_10_95_c0_n256,\n            o=(0, 0), interp=\"hanning\", aspect=nothing, d_scale=1.5,\n            name=\"RTM\", units=\"m\", new_fig=true, save=nothing)\n\nPlot seismic data gather (i.e shot record). Calls _plot_with_units.\n\nArguments\n\nimage::Array{T, 2}: image to be plotted\nspacing::Tuple: grid spacing in physical units\nperc::Int: (Optional) Clipping percentile, default=95\ncmap::Symbol: (Optional) Color map, default=:lineargrey1095c0_n256\no::Tuple: (Optional) Origin of the image, default=(0, 0)\ninterp::String: (Optional) Interpolation method, default=\"hanning\"\naspect::Symbol: (Optional) Aspect ratio, default=:auto\nd_scale::Float: (Optional) Depth scaling, default=1.5. Applied scaling is (1:max_depth).^d_scale.\nlabels::Tuple: (Optional) Labels for the axes, default=(:X, :Depth)\nname::String: (Optional) Figure title, default=\"RTM\"\nunits::Tuple(String): (Optional) Physical units of each axis, default=(:m, :m).\nnew_fig::Bool: (Optional) Create a new figure, default=true\nsave::String: (Optional) Save figure to file, default=nothing doesn't save the figure\ncbar::Bool: (Optional) Show colorbar, default=false\n\n\n\n\n\n","category":"function"}]
}
